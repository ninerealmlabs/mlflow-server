---
services:
  minio:
    container_name: minio
    image: minio/minio:latest@sha256:d249d1fb6966de4d8ad26c04754b545205ff15a62e4fd19ebd0f26fa5baacbc0
    # platform: linux/amd64
    restart: unless-stopped
    # network_mode: host
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:?Error - MINIO_ROOT_USER must be provided in .env}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:?Error - MINIO_ROOT_PASSWORD must be provided in
        .env}
      - MINIO_DEFAULT_BUCKETS=mlflow
    command: server /data --console-address ":9001"
    # volumes:
    #   - s3:/data
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost:9000/minio/health/live
      interval: 30s
      timeout: 20s
      retries: 3

  minio_config:
    container_name: minio_config
    image: minio/mc:latest@sha256:fb8f773eac8ef9d6da0486d5dec2f42f219358bcb8de579d1623d518c9ebd4cc
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:?Error - MINIO_ROOT_USER must be provided in .env}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:?Error - MINIO_ROOT_PASSWORD must be provided in
        .env}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:?Error - AWS_ACCESS_KEY_ID must be provided in .env}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:?Error - AWS_SECRET_ACCESS_KEY must be
        provided in .env}
    entrypoint: >
      /bin/sh -c " /usr/bin/mc alias set minio http://minio:9000 ${MINIO_ROOT_USER}
      ${MINIO_ROOT_PASSWORD}; /usr/bin/mc admin config set minio site region=us-east && /usr/bin/mc
      admin service restart minio; /usr/bin/mc admin user add minio ${AWS_ACCESS_KEY_ID}
      ${AWS_SECRET_ACCESS_KEY}; /usr/bin/mc admin policy attach minio readwrite
      --user=${AWS_ACCESS_KEY_ID}; /usr/bin/mc rm -r --force minio/${BUCKET_NAME:-mlflow};
      /usr/bin/mc mb minio/${BUCKET_NAME:-mlflow}; exit 0;"
    # /usr/bin/mc admin policy set public minio/${BUCKET_NAME:-mlflow};

  postgres:
    image: postgres:latest@sha256:d17be73073d6e73a005c239c67b8c9f0331925d05bd874964f445a9f698fbf72
    container_name: postgres
    restart: unless-stopped
    # network_mode: host
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mlflow}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    # volumes:
    #   - db:/var/lib/postgresql/data
    # healthcheck:
    #   test: ["CMD", "pg_isready", "-d", "${DB_NAME:-mlflow}", "-U", "${POSTGRES_USER:-postgres}"]
    #   interval: 30s
    #   timeout: 20s
    #   retries: 3

  mlflow:
    build:
      context: ../docker/
      dockerfile: Dockerfile
    # image: ghcr.io/ninerealmlabs/mlflow-server:<latest>
    container_name: mlflow
    depends_on:
      postgres:
        condition: service_started
      minio_config:
        condition: service_completed_successfully
    restart: unless-stopped
    # network_mode: host
    ports:
      - name: mlflow
        target: &port 5000
        host_ip: 127.0.0.1
        published: 5555
        mode: host
    environment:
      MLFLOW_HOST: "0.0.0.0"
      MLFLOW_PORT: *port
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:?Error - AWS_ACCESS_KEY_ID must be provided in .env}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:?Error - AWS_SECRET_ACCESS_KEY must be provided in .env}
      # AWS_DEFAULT_REGION: us-east
      # other environmental variables as required
    command:
      - "server"
      - "--host=0.0.0.0"
      - "--port=5000"
      - "--backend-store-uri=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASS:-postgres}@postgres:5432/${DB_NAME:-mlflow}"
      - "--serve-artifacts"
      - "--artifacts-destination=s3://${BUCKET_NAME:-mlflow}"

networks:
  default:
    name: mlflow
# volumes:
#   db:
#   s3:
